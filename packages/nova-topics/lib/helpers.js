import Telescope from 'meteor/nova:lib';
import Topics from './collection.js';

let md5 = require('blueimp-md5');

Topics.helpers({getCollection: () => Topics});
Topics.helpers({getCollectionName: () => "topics"});

//////////////////
// Link Helpers //
//////////////////

/**
 * @summary Get a topic's counter name
 * @param {Object} topic
 */
Topics.getCounterName = function (topic) {
    return topic._id + "-postsCount";
};
Topics.helpers({
    getCounterName: function () {
        return Topics.getCounterName(this);
    }
});

Topics.getCounterKeyName = function () {
    return "postsCount";
};
Topics.helpers({
    getCounterKeyName: function () {
        return Topics.getCounterKeyName(this);
    }
});

/**
 * All topic's id is generated by name.toLowerCase()
 * @param topicsFilterKeys
 * @param topics
 * @param topicsArray
 * @param options
 * @returns {*}
 */
Topics.updateTopicsState = function (topicsFilterKeys, topics, topicsArray, options) {
    // remove a topic
    if (topics.length > options.length) {
        return Topics.generateTopicsState(topicsFilterKeys, topics, topicsArray, options);
    }
    // add new topic
    _.forEach(options, function (item) {
        if (!!item.label) {
            let items = Topics.generateNewTopic(Telescope.settings.get("TOPICS_FILTER_KEYS", ''), topics, item.label);
            if (!!items) {
                topicsArray.push(items);
            }
        }
    });

    topics = _.pluck(topicsArray, '_id');

    return {topics: topics, topicsArray: topicsArray};
};
Topics.generateTopicsState = function (topicsFilterKeys, topics, topicsArray, options) {
    let newTopicsArray = [];
    _.forEach(options, function (item) {
        let items = Topics.generateNewTopic(Telescope.settings.get("TOPICS_FILTER_KEYS", ''), [], item.label);
        if (!!items) {
            newTopicsArray.push(items);
        }
    });

    let newTopics = _.pluck(newTopicsArray, '_id');

    return {topics: newTopics, topicsArray: newTopicsArray};
};

Topics.generateNewTopic = function (topicsFilterKeys, topics, name) {
    // TODO: djzhang(Topics): All topic's id is generated by name.toLowerCase()
    let newId = md5(name.toLowerCase());
    // If exists,ignore it.
    if (topics.indexOf(newId) >= 0) {
        return null;
    }
    let newTopic = {
        _id: newId,
        slug: Telescope.utils.slugify(name),
        name: name,
        is_ignore: Topics.filterTopics(topicsFilterKeys, name)
    };

    return newTopic;
};

Topics.filterTopics = function (topicsFilterKeys, name) {
    let keys = topicsFilterKeys.trim().split(',');
    for (let i = 0; i < keys.length; i++) {
        if (name.indexOf(keys[i]) !== -1) {
            return true;
        }
    }
    return false;
};

Topics.getTopicStatus = (topic, state) => {
    let statusArray = [];
    let topicStatus = Topics.config.STATUS_TITLES[topic.status];
    if (state.toLowerCase() != topicStatus.toLowerCase()) {
        if (topic.status != Topics.config.STATUS_APPROVED) {
            statusArray.push(topicStatus);
        }
    }
    if (!!topic.is_ignore && (state.toLowerCase() != Topics.config.STATUS_TITLES[Topics.config.STATUS_FILTER].toLowerCase())) {
        statusArray.push(Topics.config.STATUS_TITLES[Topics.config.STATUS_FILTER]);
    }

    return statusArray;
};

Topics.getTotalCount = (props, status) => {
    let count = 0;
    switch (status) {
        case "publish":
            count = props.publishCount;
            break;
        case "filter":
            count = props.filterCount;
            break;
        case "trash":
            count = props.trashCount;
            break;
        default:
            count = props.allCount;
            break;
    }

    return count;
};

Topics.getTopicsTitle = (name) => {
    let splitStr = name.toLowerCase().split(' ');
    for (let i = 0; i < splitStr.length; i++) {
        // You do not need to check if i is larger than splitStr length, as your for does that for you
        // Assign it back to the array
        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);
    }
    // Directly return the joined string
    return splitStr.join(' ');
};

Topics.helpers({
    getTopicsTitle: function () {
        return Topics.getTopicsTitle(this);
    },
    updateTopicsState: function () {
        return Topics.updateTopicsState(this);
    },
    generateNewTopic: function () {
        return Topics.generateNewTopic(this);
    },
    filterTopics: function () {
        return Topics.filterTopics(this);
    },
    getTopicStatus: function () {
        return Topics.getTopicStatus(this);
    },
    getTotalCount: function () {
        return Topics.getTotalCount(this);
    }
});